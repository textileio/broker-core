// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xca\x4c\x29\xb6\xe6\x42\x12\x48\x2c\x4d\x2e\xc9\xcc\xcf\x83\x0b\x46\x06\xc0\xc5\xe2\x8b\x4b\x12\x4b\x4a\x8b\xad\xb9\x00\x01\x00\x00\xff\xff\x0f\x4e\x3e\xdf\x40\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 64, mode: os.FileMode(420), modTime: time.Unix(1628892697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x5f\x6f\x9b\x30\x14\xc5\xdf\xf3\x29\xee\x1b\x89\x94\x6f\xb0\x27\x27\x33\x15\x1a\x81\x08\x1c\xa9\xd1\x34\x59\x8e\x7d\xd3\x5a\x41\x98\xf9\x0f\x9d\xf6\xe9\x27\x48\x10\x2d\xa5\xe3\xcd\xe2\xfe\x38\xe6\x9c\xc3\xdd\x17\x94\x30\x0a\xec\x7c\xa4\x20\x82\xf4\xda\xd4\xdc\x79\xe1\x83\x03\x52\x02\xcd\x4e\x07\x58\x47\xa1\x76\x0d\x4a\x7d\xd5\xa8\xa2\x2d\x44\xbf\x03\x86\xee\x14\x39\x2f\xac\xef\x4f\x57\x5d\x8b\x4a\xff\x45\x15\x6d\xbe\xad\x56\x83\x28\xd9\xa5\x14\x92\x18\xb2\x9c\x01\x7d\x4e\x4a\x56\x0e\x77\x38\x58\xaf\x00\x00\xb4\x02\x46\x9f\x19\x1c\x8b\xe4\x40\x8a\x33\xfc\xa0\xe7\x6d\x3f\xb8\x08\x2f\x5f\xf9\x30\xee\x04\xb2\x53\x9a\xde\x67\x0a\x45\xc5\x5b\xb4\xfd\x07\xc1\x2e\xcf\x53\x4a\xb2\x09\x83\x7f\x64\x15\x14\x2a\xee\xbc\xb1\xe2\x05\x79\x63\x4d\xab\x15\x5a\xd7\x2b\xfe\xfc\x75\xc7\x1e\x56\x27\xce\x3f\x4a\x3d\x5c\x72\xe1\x81\x25\x07\x5a\x32\x72\x38\x4e\x90\xd0\x28\xb1\x80\xc8\xca\xb8\x09\xf1\x70\x13\xac\xe8\x2e\x87\x5d\xf2\x94\x64\x53\xaf\x68\xad\xb1\x5c\x8a\xe0\xf0\x63\x14\xab\x85\xa0\x2f\x5a\x0d\x21\x0f\xee\xe6\xd3\x9c\x06\xf4\x05\x76\xd1\xea\xeb\xa1\x70\x37\xde\x58\x2d\x71\xde\xc4\xd0\x15\x5f\xe0\xfa\xa4\x39\x36\x46\xbe\xce\x03\x57\xe1\x3c\xb7\xe8\xad\xc6\x56\x54\x9f\xaa\x87\xef\x34\x26\xa7\x94\x41\x4c\xd2\x92\xde\x5f\xb1\x28\x51\xb7\xff\xef\xe6\xcd\xd4\x33\xc5\x08\x79\xab\xcd\x5b\x85\xea\x65\xb6\xb7\xc6\x9a\xc6\x38\x51\x71\xa9\x15\x57\x58\xe9\x16\xed\x22\xd8\x87\x77\x7f\xbc\xcf\xb3\x92\x15\xa4\x33\xd9\xdc\xf8\xd8\x11\x1f\x93\x7e\xb7\x15\xeb\x11\xd8\x8e\x5d\x6c\x3e\x49\x5d\xdf\x4b\x41\x9c\x17\x34\x79\xca\x26\x02\x1b\x28\x68\x4c\x0b\x9a\xed\xe9\xb8\x90\x6b\xad\x36\xdd\x3f\xf5\x2f\x00\x00\xff\xff\x2d\xcb\xe5\xdc\x11\x04\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1041, mode: os.FileMode(420), modTime: time.Unix(1629216833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
