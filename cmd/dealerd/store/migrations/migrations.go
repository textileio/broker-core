// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
// migrations/002_market_status.down.sql
// migrations/002_market_status.up.sql
// migrations/003_remote_wallet.down.sql
// migrations/003_remote_wallet.up.sql
// migrations/004_batch_id_key.down.sql
// migrations/004_batch_id_key.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2c\x4d\x2e\xc9\xcc\xcf\x8b\x4f\x49\x4d\xcc\x29\xb6\xe6\x82\xc8\x44\x06\xb8\x2a\x14\x97\x24\x96\x94\xc2\x45\x50\xd5\x26\x96\x24\x5a\x73\x01\x02\x00\x00\xff\xff\x00\x02\xb7\x1e\x45\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 69, mode: os.FileMode(420), modTime: time.Unix(1628108979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xcf\x6e\xe2\x30\x10\xc6\xef\x3c\xc5\xdc\x00\x69\xfb\x04\x3d\x65\xa9\x59\x45\x0b\x01\x85\x20\x95\x93\x35\xd8\x03\x1d\x11\xe2\x68\xec\x20\xda\xa7\x5f\x25\x94\xaa\xcd\x26\x59\x69\x7b\xb2\x94\xdf\xe7\xf1\xfc\xf9\x26\xb3\x54\x45\x99\x82\x2c\xfa\xb9\x50\x10\xcf\x21\x59\x65\xa0\x9e\xe3\x4d\xb6\x01\xac\x4c\x60\x57\x68\x8b\x01\x61\x32\x02\x00\x60\x0b\x81\xae\x01\xd6\x69\xbc\x8c\xd2\x1d\xfc\x56\xbb\x1f\x0d\xd8\x63\x30\x2f\xfa\x8e\xeb\x20\xc9\x76\xb1\xb8\xb1\x12\x5f\x73\x87\x56\x9b\x1e\xcc\x64\x68\x18\x7a\x7e\x23\xd8\xf3\x91\x8b\x36\xb7\x95\x60\x9d\x64\x37\x35\x42\x18\xc8\x6a\x0c\x90\xc5\x4b\xb5\xc9\xa2\xe5\xfa\x43\x02\x4f\x6a\x1e\x6d\x17\x19\xcc\xb6\x69\xaa\x92\x4c\x7f\x48\x9a\xbb\xd3\xc7\xd1\xe8\xde\x9c\xdd\x5a\x81\x0f\x18\x2a\x0f\xd1\x06\x54\xb2\x5d\x36\xfd\x18\x5b\xc2\xfc\xe1\x8c\x27\x2e\x8e\xe3\xfa\xc5\xb1\x71\xc5\x81\xe5\xdc\xa4\x74\xfb\x22\x54\x3a\x09\x0f\x07\x2e\x30\xe7\x37\xb2\xe3\xd1\xe7\xc0\x43\x5d\x27\xcc\xfd\xbf\xda\xfe\x79\x44\x3d\xdd\xf7\xc1\x09\x1e\x49\x97\xe2\x2e\x6c\x49\xfa\x86\x24\x6c\x48\x97\x24\xfa\xc8\xfb\xe6\xa4\xd2\x99\x97\xee\xbe\xfa\x80\x12\x86\x04\x17\x12\x3e\x30\x59\xd8\x3b\x97\x13\x16\x2d\x7c\x40\x1f\xb4\x50\x10\xa6\x0b\xe6\x3d\xa2\x7b\x6d\xdd\xf9\xee\xd9\xf6\x16\xdc\x0c\xea\xfd\xf8\xca\xe8\x4a\xa6\x0a\x5c\x1c\x7b\xde\x24\x11\x27\xda\x60\xe5\xa9\x2b\xf4\x2d\x65\x0f\xfe\x8c\x79\xfe\x77\xd5\xa5\xb8\xd2\x79\xcc\xfb\xcc\x5c\x8f\xb4\x4e\xba\xdb\xc9\x35\xa4\x6b\xc9\x43\x86\x6e\x44\x67\x94\x13\x05\xfd\x5e\x60\xa7\x4e\x08\xed\x6b\xb7\xed\xbf\xb5\x19\xb7\xcb\x55\x69\xff\xff\xf2\x6c\x95\x6c\xb2\x34\x8a\x93\x0c\x0e\x27\xdd\x36\xf0\x7c\x95\xaa\xf8\x57\x52\x3b\x7c\xd2\x62\x53\x48\xd5\x5c\xa5\x2a\x99\xa9\xaf\xff\xa6\x09\xdb\x69\x7b\x65\xe3\xe4\x49\x3d\x0f\x6d\x96\xee\xda\x8b\x55\xd2\x5e\xbf\x0e\xd5\xf4\x71\xf4\x27\x00\x00\xff\xff\xc9\xf0\x8a\x40\x35\x05\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1333, mode: os.FileMode(420), modTime: time.Unix(1628108979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_market_statusDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\xca\x4e\x2d\x89\x4f\x49\x4d\xcc\x89\x2f\x2e\x49\x2c\x29\x2d\xb6\xe6\xe2\xe2\x02\x04\x00\x00\xff\xff\x14\xa7\xbe\x6d\x21\x00\x00\x00")

func _002_market_statusDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_market_statusDownSql,
		"002_market_status.down.sql",
	)
}

func _002_market_statusDownSql() (*asset, error) {
	bytes, err := _002_market_statusDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_market_status.down.sql", size: 33, mode: os.FileMode(420), modTime: time.Unix(1628185790, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_market_statusUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\x6f\xda\x4e\x10\xc5\xcf\x7f\x7f\x8a\xb9\x19\x24\x1f\xfe\xa6\x25\x49\x95\x93\x8b\x8c\x84\x4a\x09\x02\x43\x9b\x53\x34\xb1\x07\x98\x62\x76\xd1\xee\x02\x69\x3f\x7d\x35\x86\x78\xd7\x6d\xaf\xef\xbd\x7d\x33\xf3\xb3\x47\x8b\x3c\x2b\x72\x28\xb2\xcf\xd3\x1c\x26\x63\x98\x3d\x15\x90\x7f\x9f\x2c\x8b\x25\x1c\xd0\xec\xc9\xbd\x54\x84\xf5\x8b\x75\xe8\x4e\x16\x7a\x11\x00\x00\x57\xf0\xca\x5b\x56\xae\x49\xcf\x56\xd3\x29\xcc\x17\x93\xaf\xd9\xe2\x19\xbe\xe4\xcf\x49\x93\x51\x78\x20\x70\xf4\xe6\x33\x51\xff\x31\x8a\x26\xb3\x65\xbe\x28\x60\x32\x2b\x9e\xfe\xd9\xcf\x55\xd2\x3c\xed\x83\xb4\xac\xb3\xe9\x2a\x5f\x36\x7d\xbd\xff\x13\x88\x57\x6a\xaf\xf4\x45\xc5\xfd\xeb\x8c\x5e\x9a\x40\x3c\x37\xfa\xa8\x2d\xd6\xa0\xb4\x83\x8d\x3e\xa9\xaa\xb5\x07\xa1\x6d\xe8\x07\x95\x8e\xbc\xfb\x21\x74\xb1\x2c\xe9\x18\xba\x1f\x13\x88\x97\x0e\xb7\x81\x34\x14\x89\xb0\x66\xb5\x6d\xb5\xbb\x04\xe2\x31\x2b\xac\xf9\x57\x28\xdf\x27\x10\x67\xa5\xe3\x33\xb5\xd2\x43\x02\x71\xfe\x76\x64\x13\x34\x7e\x92\xc6\x1a\xed\x2e\xd0\x52\x39\x74\xd1\x2c\x1b\x36\xa6\x72\xeb\x18\xb9\x33\x3d\x95\x0b\xc7\x27\x55\x59\x30\x64\xc9\x9c\xc3\x1e\xb9\x6f\xb4\xa3\x72\xcf\x6a\x0b\x1b\x6d\x40\x40\xdf\x0e\x45\x55\xfa\xcd\x52\xb9\x75\x8d\x35\x57\xd8\x1d\x39\x6c\xae\x90\x3c\x5c\x90\x9d\x37\xee\xae\x70\x8c\xc4\xa1\x42\x87\xe0\x0c\x2a\xbb\x21\xe3\x33\x82\xa0\xb8\xa9\xa6\x53\x2b\x24\xbe\x21\xbb\x76\x2f\x74\xe8\x5d\x61\xb2\x26\xc3\x9b\x9f\xef\xe5\xfe\x7b\x5e\xd1\xc8\xa1\xe2\x1d\x8d\x3e\x73\x45\x06\x36\x42\xc0\xa7\xd2\x4e\xaa\xac\x99\x94\xfb\x33\x73\xfb\x35\xfc\xfb\x70\xc3\x41\x83\xce\xbf\xeb\x78\x02\x6b\x7e\x7a\xad\xd9\xee\xbc\x38\xf4\x62\x27\x2c\xa0\x72\x63\xb4\xe7\x32\xb8\x0f\x27\xbf\x63\x03\x14\xc0\xf2\x11\x85\xaa\x0f\x3f\xf8\x45\xda\xe8\x5f\x21\x21\x96\x5d\x6e\x40\x11\xe6\x86\x46\xfa\x70\x60\x07\x07\xb2\x16\xb7\x04\x5a\x41\xb9\x43\x56\x71\xff\x31\xfa\x2f\xfa\x1d\x00\x00\xff\xff\x74\xb3\xf8\x95\xf2\x03\x00\x00")

func _002_market_statusUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_market_statusUpSql,
		"002_market_status.up.sql",
	)
}

func _002_market_statusUpSql() (*asset, error) {
	bytes, err := _002_market_statusUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_market_status.up.sql", size: 1010, mode: os.FileMode(420), modTime: time.Unix(1628185790, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_remote_walletDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\xcd\xcd\x2f\x49\x8d\x2f\x4f\xcc\xc9\x49\x2d\xb1\xe6\x02\x04\x00\x00\xff\xff\x6a\x10\xc8\xed\x1a\x00\x00\x00")

func _003_remote_walletDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_remote_walletDownSql,
		"003_remote_wallet.down.sql",
	)
}

func _003_remote_walletDownSql() (*asset, error) {
	bytes, err := _003_remote_walletDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_remote_wallet.down.sql", size: 26, mode: os.FileMode(420), modTime: time.Unix(1632421151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_remote_walletUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xcf\x6a\x83\x40\x10\x87\xef\x3e\xc5\x1c\x15\xf2\x06\x3d\x6d\xed\x58\x96\xea\x1a\x76\x47\x68\x28\x65\x59\xb2\x53\x2a\x31\x31\xd8\x91\xf6\xf1\x8b\xa6\x08\x11\x4f\x3d\x7f\xbf\x3f\xf0\xe5\x16\x15\x21\x90\x7a\x2c\x11\x74\x01\xa6\x26\xc0\x57\xed\xc8\xc1\xc0\xe7\x5e\xd8\x7f\x87\xae\x63\x81\x34\x01\x00\x08\xe3\x51\xda\xfe\xe2\x63\x90\xe0\xdb\x08\xc2\x3f\x02\x7b\xab\x2b\x65\x0f\xf0\x82\x87\xdd\x9c\xba\x32\x0f\x0b\x9d\x16\x4d\x53\x96\xbb\xbf\x01\xf9\xf4\xd2\x9f\xf8\xb2\x45\x6f\x5f\x3e\xc4\x38\x6c\xe1\xf3\xd8\x49\x3b\xc1\xaf\x99\xbe\xbd\xaf\xf8\x71\xe0\x20\x1c\x7d\x10\x20\x5d\xa1\x23\x55\xed\x97\x08\x3c\x61\xa1\x9a\x92\x20\x6f\xac\x45\x43\x7e\x89\xdc\xca\xe3\x35\xfe\xaf\x3c\xb7\xf3\xda\x38\xb2\x4a\x1b\x82\x8f\x93\xbf\x53\xe7\xd7\xd2\x8a\xda\xa2\x7e\x36\x93\xaf\x74\xc5\x32\xb0\x58\xa0\x45\x93\xa3\xbb\x93\x9d\xb6\x31\x9b\x8f\xb2\x87\x24\xf9\x0d\x00\x00\xff\xff\x37\x93\x40\x7d\xb5\x01\x00\x00")

func _003_remote_walletUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_remote_walletUpSql,
		"003_remote_wallet.up.sql",
	)
}

func _003_remote_walletUpSql() (*asset, error) {
	bytes, err := _003_remote_walletUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_remote_wallet.up.sql", size: 437, mode: os.FileMode(420), modTime: time.Unix(1632421151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_batch_id_keyDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\xa3\x30\x10\xbd\xf3\x15\x73\x4b\x2b\x95\xfe\x40\xd5\x03\x4b\x9c\x6d\xb4\xc4\x44\xc4\xd1\x6e\x4f\xc8\x1b\x3b\x5d\x2b\xc4\x46\xc4\xb4\xea\x7e\xfd\xca\x84\x10\x6c\x42\xb2\x6d\x38\x94\x23\xf6\xbc\xf1\xbc\x79\xf3\xc6\xbf\xea\xf3\x7c\x1f\x56\x54\x8e\x34\x14\x7c\xab\x5e\x39\xac\x85\xa4\x99\xf8\xcb\x19\xec\x34\xd5\xe5\x0e\xb8\x2c\xb7\xde\x95\x49\xae\x8d\xf7\x7d\xa0\xe5\x4a\x0b\x25\x53\x46\x35\x1d\xe0\x39\xb0\x2a\x38\xd5\x1c\x04\x83\x95\xca\xca\xad\xf4\x82\x88\xa0\x04\x48\xf0\x2d\x42\x56\x32\x08\xc6\x63\x08\xe3\x68\x39\xc3\xe6\x36\x41\xbf\xc8\x43\x85\xb0\xe3\xba\x15\xbe\x9c\x8f\x03\xe2\x44\x2e\x10\x31\x37\x1e\xe1\x37\xd5\xab\x3f\xa9\x60\xfb\xc0\x9a\x69\x95\x31\xc8\x37\xfc\xbd\x37\xb3\x37\x4e\xe2\x39\x84\x31\x5e\x90\x24\x98\x62\x62\x1d\xa6\x26\x74\x8f\x47\x19\x03\xc9\xdf\x2a\x30\x50\x12\x04\xeb\x87\xdc\x17\xd3\x8f\xe8\xcd\x93\xe9\x2c\x48\x9e\xe1\x07\x7a\x86\x1b\xc1\x6e\x1f\xbc\x21\xba\x67\x4a\xd6\x3c\x7d\xa3\x59\xc6\xf5\x10\xed\x63\x85\xca\x61\xad\x0a\x2e\x5e\x24\x98\xba\xb5\x72\x0a\x6d\x31\x60\x67\x77\x59\x5d\x6f\x52\xeb\x42\x6a\x77\xab\xca\x94\x17\x62\x4b\x8b\x77\x70\xdb\x75\x1e\xd9\x86\x3d\x36\xac\xd6\x9e\x45\xfe\x69\x21\x5a\x08\x6d\x25\xba\xb1\x47\x59\xe6\x2a\x2f\xb3\x13\xf0\x07\x85\xda\x4f\x36\x12\x75\xb1\x1e\xad\x3f\xf7\x82\x79\x93\x24\x9e\xd9\xf4\xfe\x7c\x42\x89\x83\x75\x7f\xe0\xcd\x05\xb0\xf9\x34\x6a\x3d\xd3\x38\x73\xd6\x79\x7a\x3f\xe5\x8e\x9e\x3b\xbd\x74\x6b\x9b\xc4\x09\x9a\x7e\xc7\x7b\x79\x3b\x87\xb7\x5e\x82\x26\x28\x41\x38\x44\x0b\xfb\x4d\x66\x10\x60\x16\x90\xf0\x09\x16\xd3\xd9\x3c\x42\x5e\x8c\xa1\xe6\x13\xc7\x10\x84\x64\x1a\x63\xf3\x6f\x8c\x22\xd4\xfe\x77\x2c\xf9\x30\x9c\x9f\x2e\xad\x2b\x26\x7b\x56\xdd\x62\x5a\xea\x6d\x1a\x73\x42\x61\xb5\x66\x2b\x51\x59\x8d\xba\x76\xe4\x9b\xf7\x70\x9a\xed\x06\x1b\xf9\x7e\xc3\xac\xd2\xf4\x3a\xa6\x39\x6d\x4d\xe0\x87\xec\xe3\x7c\x8a\xf5\x26\xb5\xb3\x74\xe5\x7e\x61\xc9\x98\x28\xf0\xce\xaf\x99\xce\x7e\xa9\xde\xd2\x2c\x98\x30\xc6\x61\x40\x6e\x76\x5a\x15\xf4\x85\xa7\x79\xa1\x5e\x05\xe3\x45\x2a\xd8\x1d\x8c\xfc\xd1\x5d\x13\xd7\x08\xa3\xf6\xa0\x4b\x3b\xa3\x4a\xd3\xb7\x34\x1a\x52\x4f\x6d\x8d\xba\xf6\xff\x30\xb9\x53\xc9\x2e\x98\x9c\x21\xa5\xc7\xdf\xba\x0c\x7d\xde\xdf\x2c\xac\x0f\xf8\x9b\x54\x1a\x64\x99\x65\xae\xac\xdc\x81\x77\x2a\xaf\x4e\x7a\x6a\x37\x85\xe0\x98\x00\x5e\x46\xd1\x30\x46\x7a\xb6\xc7\x1d\x55\x7f\x09\x23\xb5\xdc\xec\xf2\x8c\xda\xa6\xf6\x2f\x00\x00\xff\xff\xe7\xb6\x6a\x27\x29\x0b\x00\x00")

func _004_batch_id_keyDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_batch_id_keyDownSql,
		"004_batch_id_key.down.sql",
	)
}

func _004_batch_id_keyDownSql() (*asset, error) {
	bytes, err := _004_batch_id_keyDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_batch_id_key.down.sql", size: 2857, mode: os.FileMode(420), modTime: time.Unix(1633630905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_batch_id_keyUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x5d\x6f\x9b\x30\x14\x7d\xe7\x57\xdc\xb7\x6e\xd2\xd2\x3f\x50\xed\x81\x25\xce\x1a\x8d\x40\x44\x9c\x6d\x79\x42\x1e\xbe\x69\xad\xb8\x76\x04\xa6\x55\xf7\xeb\x27\x27\x21\x60\x20\x1f\x1d\xa9\x54\x1e\xb1\x7d\xee\xbd\xe7\xde\x73\xec\x41\xaf\xcf\x1b\x0c\x20\xc3\x27\xfd\x8c\xc0\xa4\x84\x95\xce\x50\x3c\x28\x58\xe3\x6b\x0e\xe6\x91\x19\xc8\x70\x85\x19\xaa\x14\x81\x15\xa9\x11\x5a\x25\x9c\x19\x76\x2b\xb8\xd7\x33\xb0\x8d\x7c\x80\x44\x26\x73\xcf\x0f\x28\x89\x81\xfa\xdf\x02\xd2\x58\x19\xc5\xd1\x0c\x86\x51\x38\xa7\xb1\x3f\x09\x29\xac\xd6\x49\x3d\x9b\x44\xf0\x3b\xaf\xac\xc4\x60\xf2\xc2\xa4\x44\xe3\xe0\xb9\x2b\x1d\x78\xce\x86\x0e\xf4\xbe\xe5\xd6\xab\x65\x86\x5d\x83\xbd\x7d\xdf\xb4\xe4\xb0\x59\xe3\x6b\x37\x7f\x36\x56\xb3\x5c\xa7\x3a\x7b\x74\xc7\x1e\xe3\x1c\x14\xbe\x6c\xc1\x40\x2b\xf8\xc3\x4c\xfa\x98\x08\x7e\x1c\xd8\x1f\x8d\x4e\xe2\x7a\xb3\x78\x32\xf5\xe3\x25\xfc\x20\x4b\xf8\x54\xe2\x7d\xbe\x32\x9d\xdb\x11\xe9\x89\x07\x25\x01\x65\x92\x90\x6a\x59\x3c\xa9\xe3\x43\x09\xfb\xea\x83\xc5\x34\xac\x4e\x51\xf2\x9b\xee\xd8\xdc\xe8\x4d\x21\x99\xc1\x16\xe2\x62\x36\xf2\x69\x0b\x6c\x4e\x68\xb5\xf3\xab\x2b\xb6\x43\x23\xc6\x71\x34\x75\x3b\xf0\xeb\x9e\xc4\x0d\xac\xdb\xc6\xf0\x36\xd1\x4a\xb1\x6c\xdb\xad\x0d\xa8\x42\x4a\x48\xb5\xca\x4d\xc6\x84\x32\x60\xf4\x99\xce\xd7\xc4\xda\x2c\xdf\x56\x11\x46\x14\xc2\x45\x10\x54\x51\x6a\xae\x62\xd1\xeb\xd9\xd8\xb5\x8b\xc2\xb9\x93\x56\x37\x00\xbb\x9e\x1c\x32\x18\x47\x31\x99\x7c\x0f\x1b\x13\xe7\xc5\x64\x4c\x62\x12\x0e\xc9\xdc\x0d\x5f\x6d\x81\xa9\x4f\x87\xf7\x30\x9f\x4c\x67\x01\xf1\xa2\x10\xf6\x7d\x0a\x23\xf0\x87\x74\x12\x85\xf6\xdf\x88\x04\xa4\xfe\xef\xae\x29\xc4\x22\x47\x89\x79\x7e\x76\x7a\x4a\x4d\x6e\xe9\x3b\xea\x65\x67\xd5\xdd\xe9\x8e\x2e\x33\x95\xbe\xd3\x0c\xed\x3c\x96\x12\xbf\x9c\xed\x36\xa0\x2b\xec\xdc\xe8\x8c\x3d\x60\xb2\xc9\xf4\xb3\xe0\x98\x25\x82\x7f\x39\x1c\xda\xe9\x7d\x30\x00\x8e\x12\x4d\x55\xd0\xdb\x28\xba\x96\x07\xbb\xf7\x40\x4f\xbc\x4b\x3c\xc3\x09\xd8\xd7\x33\xdc\xec\x7b\x59\x86\x03\xf5\x5e\x96\xd1\x75\x1f\xbf\xa3\x65\x34\xc2\xb5\x2c\xc3\xbd\xe3\x3f\x8a\x65\xb4\xb4\x78\xfa\xad\xe2\x16\xf1\xc6\xdb\xfb\x24\x43\x6d\xe4\xe3\xf7\xf7\xc5\xae\xd7\x59\xcc\x11\xd7\xfb\x60\x6f\x2c\xf8\x0f\x6f\xaf\x3d\xb7\xae\xea\x5b\xb6\xbb\x6c\xdb\xdf\xdc\x30\x53\xf4\x7e\xef\xec\x93\x5f\xce\xc8\x1e\x10\xec\x30\xfc\xf4\x83\x05\x81\x9b\x95\x50\x4c\x8a\xbf\xc8\x6f\xee\xfe\x05\x00\x00\xff\xff\xae\x58\x91\xc3\x5e\x0c\x00\x00")

func _004_batch_id_keyUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_batch_id_keyUpSql,
		"004_batch_id_key.up.sql",
	)
}

func _004_batch_id_keyUpSql() (*asset, error) {
	bytes, err := _004_batch_id_keyUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_batch_id_key.up.sql", size: 3166, mode: os.FileMode(420), modTime: time.Unix(1633629034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql":          _001_initDownSql,
	"001_init.up.sql":            _001_initUpSql,
	"002_market_status.down.sql": _002_market_statusDownSql,
	"002_market_status.up.sql":   _002_market_statusUpSql,
	"003_remote_wallet.down.sql": _003_remote_walletDownSql,
	"003_remote_wallet.up.sql":   _003_remote_walletUpSql,
	"004_batch_id_key.down.sql":  _004_batch_id_keyDownSql,
	"004_batch_id_key.up.sql":    _004_batch_id_keyUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql":          &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":            &bintree{_001_initUpSql, map[string]*bintree{}},
	"002_market_status.down.sql": &bintree{_002_market_statusDownSql, map[string]*bintree{}},
	"002_market_status.up.sql":   &bintree{_002_market_statusUpSql, map[string]*bintree{}},
	"003_remote_wallet.down.sql": &bintree{_003_remote_walletDownSql, map[string]*bintree{}},
	"003_remote_wallet.up.sql":   &bintree{_003_remote_walletUpSql, map[string]*bintree{}},
	"004_batch_id_key.down.sql":  &bintree{_004_batch_id_keyDownSql, map[string]*bintree{}},
	"004_batch_id_key.up.sql":    &bintree{_004_batch_id_keyUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
