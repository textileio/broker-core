// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2c\x4d\x2e\xc9\xcc\xcf\x8b\x4f\x49\x4d\xcc\x29\xb6\xe6\x82\xc8\x44\x06\xb8\x2a\x14\x97\x24\x96\x94\xc2\x45\x50\xd5\x26\x96\x24\x5a\x73\x01\x02\x00\x00\xff\xff\x00\x02\xb7\x1e\x45\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 69, mode: os.FileMode(436), modTime: time.Unix(1626974831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xcf\x6e\xe2\x30\x10\xc6\xef\x3c\xc5\xdc\x00\x69\xfb\x04\x3d\x65\xa9\x59\x45\x0b\x01\x85\x20\x95\x93\x35\xd8\x03\x1d\x11\xe2\x68\xec\x20\xda\xa7\x5f\x25\x94\xaa\xcd\x26\x59\x69\x7b\xb2\x94\xdf\xe7\xf1\xfc\xf9\x26\xb3\x54\x45\x99\x82\x2c\xfa\xb9\x50\x10\xcf\x21\x59\x65\xa0\x9e\xe3\x4d\xb6\x01\xac\x4c\x60\x57\x68\x8b\x01\x61\x32\x02\x00\x60\x0b\x81\xae\x01\xd6\x69\xbc\x8c\xd2\x1d\xfc\x56\xbb\x1f\x0d\xd8\x63\x30\x2f\xfa\x8e\xeb\x20\xc9\x76\xb1\xb8\xb1\x12\x5f\x73\x87\x56\x9b\x1e\xcc\x64\x68\x18\x7a\x7e\x23\xd8\xf3\x91\x8b\x36\xb7\x95\x60\x9d\x64\x37\x35\x42\x18\xc8\x6a\x0c\x90\xc5\x4b\xb5\xc9\xa2\xe5\xfa\x43\x02\x4f\x6a\x1e\x6d\x17\x19\xcc\xb6\x69\xaa\x92\x4c\x7f\x48\x9a\xbb\xd3\xc7\xd1\xe8\xde\x9c\xdd\x5a\x81\x0f\x18\x2a\x0f\xd1\x06\x54\xb2\x5d\x36\xfd\x18\x5b\xc2\xfc\xe1\x8c\x27\x2e\x8e\xe3\xfa\xc5\xb1\x71\xc5\x81\xe5\xdc\xa4\x74\xfb\x22\x54\x3a\x09\x0f\x07\x2e\x30\xe7\x37\xb2\xe3\xd1\xe7\xc0\x43\x5d\x27\xcc\xfd\xbf\xda\xfe\x79\x44\x3d\xdd\xf7\xc1\x09\x1e\x49\x97\xe2\x2e\x6c\x49\xfa\x86\x24\x6c\x48\x97\x24\xfa\xc8\xfb\xe6\xa4\xd2\x99\x97\xee\xbe\xfa\x80\x12\x86\x04\x17\x12\x3e\x30\x59\xd8\x3b\x97\x13\x16\x2d\x7c\x40\x1f\xb4\x50\x10\xa6\x0b\xe6\x3d\xa2\x7b\x6d\xdd\xf9\xee\xd9\xf6\x16\xdc\x0c\xea\xfd\xf8\xca\xe8\x4a\xa6\x0a\x5c\x1c\x7b\xde\x24\x11\x27\xda\x60\xe5\xa9\x2b\xf4\x2d\x65\x0f\xfe\x8c\x79\xfe\x77\xd5\xa5\xb8\xd2\x79\xcc\xfb\xcc\x5c\x8f\xb4\x4e\xba\xdb\xc9\x35\xa4\x6b\xc9\x43\x86\x6e\x44\x67\x94\x13\x05\xfd\x5e\x60\xa7\x4e\x08\xed\x6b\xb7\xed\xbf\xb5\x19\xb7\xcb\x55\x69\xff\xff\xf2\x6c\x95\x6c\xb2\x34\x8a\x93\x0c\x0e\x27\xdd\x36\xf0\x7c\x95\xaa\xf8\x57\x52\x3b\x7c\xd2\x62\x53\x48\xd5\x5c\xa5\x2a\x99\xa9\xaf\xff\xa6\x09\xdb\x69\x7b\x65\xe3\xe4\x49\x3d\x0f\x6d\x96\xee\xda\x8b\x55\xd2\x5e\xbf\x0e\xd5\xf4\x71\xf4\x27\x00\x00\xff\xff\xc9\xf0\x8a\x40\x35\x05\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1333, mode: os.FileMode(436), modTime: time.Unix(1627395730, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
