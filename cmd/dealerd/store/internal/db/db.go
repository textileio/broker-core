// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAuctionDataStmt, err = db.PrepareContext(ctx, createAuctionData); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAuctionData: %w", err)
	}
	if q.createAuctionDealStmt, err = db.PrepareContext(ctx, createAuctionDeal); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAuctionDeal: %w", err)
	}
	if q.createRemoteWalletStmt, err = db.PrepareContext(ctx, createRemoteWallet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRemoteWallet: %w", err)
	}
	if q.getAuctionDataStmt, err = db.PrepareContext(ctx, getAuctionData); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuctionData: %w", err)
	}
	if q.getAuctionDealStmt, err = db.PrepareContext(ctx, getAuctionDeal); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuctionDeal: %w", err)
	}
	if q.getAuctionDealIDsStmt, err = db.PrepareContext(ctx, getAuctionDealIDs); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuctionDealIDs: %w", err)
	}
	if q.getAuctionDealsByStatusStmt, err = db.PrepareContext(ctx, getAuctionDealsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuctionDealsByStatus: %w", err)
	}
	if q.getRemoteWalletStmt, err = db.PrepareContext(ctx, getRemoteWallet); err != nil {
		return nil, fmt.Errorf("error preparing query GetRemoteWallet: %w", err)
	}
	if q.nextPendingAuctionDealStmt, err = db.PrepareContext(ctx, nextPendingAuctionDeal); err != nil {
		return nil, fmt.Errorf("error preparing query NextPendingAuctionDeal: %w", err)
	}
	if q.updateAuctionDealStmt, err = db.PrepareContext(ctx, updateAuctionDeal); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAuctionDeal: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAuctionDataStmt != nil {
		if cerr := q.createAuctionDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAuctionDataStmt: %w", cerr)
		}
	}
	if q.createAuctionDealStmt != nil {
		if cerr := q.createAuctionDealStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAuctionDealStmt: %w", cerr)
		}
	}
	if q.createRemoteWalletStmt != nil {
		if cerr := q.createRemoteWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRemoteWalletStmt: %w", cerr)
		}
	}
	if q.getAuctionDataStmt != nil {
		if cerr := q.getAuctionDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuctionDataStmt: %w", cerr)
		}
	}
	if q.getAuctionDealStmt != nil {
		if cerr := q.getAuctionDealStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuctionDealStmt: %w", cerr)
		}
	}
	if q.getAuctionDealIDsStmt != nil {
		if cerr := q.getAuctionDealIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuctionDealIDsStmt: %w", cerr)
		}
	}
	if q.getAuctionDealsByStatusStmt != nil {
		if cerr := q.getAuctionDealsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuctionDealsByStatusStmt: %w", cerr)
		}
	}
	if q.getRemoteWalletStmt != nil {
		if cerr := q.getRemoteWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRemoteWalletStmt: %w", cerr)
		}
	}
	if q.nextPendingAuctionDealStmt != nil {
		if cerr := q.nextPendingAuctionDealStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing nextPendingAuctionDealStmt: %w", cerr)
		}
	}
	if q.updateAuctionDealStmt != nil {
		if cerr := q.updateAuctionDealStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAuctionDealStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	createAuctionDataStmt       *sql.Stmt
	createAuctionDealStmt       *sql.Stmt
	createRemoteWalletStmt      *sql.Stmt
	getAuctionDataStmt          *sql.Stmt
	getAuctionDealStmt          *sql.Stmt
	getAuctionDealIDsStmt       *sql.Stmt
	getAuctionDealsByStatusStmt *sql.Stmt
	getRemoteWalletStmt         *sql.Stmt
	nextPendingAuctionDealStmt  *sql.Stmt
	updateAuctionDealStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		createAuctionDataStmt:       q.createAuctionDataStmt,
		createAuctionDealStmt:       q.createAuctionDealStmt,
		createRemoteWalletStmt:      q.createRemoteWalletStmt,
		getAuctionDataStmt:          q.getAuctionDataStmt,
		getAuctionDealStmt:          q.getAuctionDealStmt,
		getAuctionDealIDsStmt:       q.getAuctionDealIDsStmt,
		getAuctionDealsByStatusStmt: q.getAuctionDealsByStatusStmt,
		getRemoteWalletStmt:         q.getRemoteWalletStmt,
		nextPendingAuctionDealStmt:  q.nextPendingAuctionDealStmt,
		updateAuctionDealStmt:       q.updateAuctionDealStmt,
	}
}
