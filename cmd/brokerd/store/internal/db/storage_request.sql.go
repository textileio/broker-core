// Code generated by sqlc. DO NOT EDIT.
// source: storage_request.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
	"github.com/textileio/broker-core/broker"
)

const batchUpdateStorageRequests = `-- name: BatchUpdateStorageRequests :many
UPDATE storage_requests
SET status = $1,
    batch_id = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = any ($3::TEXT[])
RETURNING id
`

type BatchUpdateStorageRequestsParams struct {
	Status  broker.StorageRequestStatus `json:"status"`
	BatchID sql.NullString              `json:"batchID"`
	Ids     []string                    `json:"ids"`
}

func (q *Queries) BatchUpdateStorageRequests(ctx context.Context, arg BatchUpdateStorageRequestsParams) ([]broker.StorageRequestID, error) {
	rows, err := q.query(ctx, q.batchUpdateStorageRequestsStmt, batchUpdateStorageRequests, arg.Status, arg.BatchID, pq.Array(arg.Ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []broker.StorageRequestID
	for rows.Next() {
		var id broker.StorageRequestID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createStorageRequest = `-- name: CreateStorageRequest :exec
INSERT INTO storage_requests(
    id,
    data_cid,
    status,
    origin
    ) VALUES ($1,$2,$3,$4)
`

type CreateStorageRequestParams struct {
	ID      broker.StorageRequestID     `json:"id"`
	DataCid string                      `json:"dataCid"`
	Status  broker.StorageRequestStatus `json:"status"`
	Origin  string                      `json:"origin"`
}

func (q *Queries) CreateStorageRequest(ctx context.Context, arg CreateStorageRequestParams) error {
	_, err := q.exec(ctx, q.createStorageRequestStmt, createStorageRequest,
		arg.ID,
		arg.DataCid,
		arg.Status,
		arg.Origin,
	)
	return err
}

const getStorageRequest = `-- name: GetStorageRequest :one
SELECT id, data_cid, batch_id, origin, rebatch_count, error_cause, created_at, updated_at, status FROM storage_requests
WHERE id = $1
`

func (q *Queries) GetStorageRequest(ctx context.Context, id broker.StorageRequestID) (StorageRequest, error) {
	row := q.queryRow(ctx, q.getStorageRequestStmt, getStorageRequest, id)
	var i StorageRequest
	err := row.Scan(
		&i.ID,
		&i.DataCid,
		&i.BatchID,
		&i.Origin,
		&i.RebatchCount,
		&i.ErrorCause,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getStorageRequestIDs = `-- name: GetStorageRequestIDs :many
SELECT id FROM storage_requests
WHERE batch_id = $1
`

func (q *Queries) GetStorageRequestIDs(ctx context.Context, batchID sql.NullString) ([]broker.StorageRequestID, error) {
	rows, err := q.query(ctx, q.getStorageRequestIDsStmt, getStorageRequestIDs, batchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []broker.StorageRequestID
	for rows.Next() {
		var id broker.StorageRequestID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStorageRequests = `-- name: GetStorageRequests :many
SELECT id, data_cid, batch_id, origin, rebatch_count, error_cause, created_at, updated_at, status FROM storage_requests
WHERE batch_id = $1
`

func (q *Queries) GetStorageRequests(ctx context.Context, batchID sql.NullString) ([]StorageRequest, error) {
	rows, err := q.query(ctx, q.getStorageRequestsStmt, getStorageRequests, batchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StorageRequest
	for rows.Next() {
		var i StorageRequest
		if err := rows.Scan(
			&i.ID,
			&i.DataCid,
			&i.BatchID,
			&i.Origin,
			&i.RebatchCount,
			&i.ErrorCause,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rebatchStorageRequests = `-- name: RebatchStorageRequests :exec
UPDATE storage_requests
SET rebatch_count = rebatch_count + 1,
    error_cause = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE batch_id = $1
`

type RebatchStorageRequestsParams struct {
	BatchID    sql.NullString `json:"batchID"`
	ErrorCause string         `json:"errorCause"`
}

func (q *Queries) RebatchStorageRequests(ctx context.Context, arg RebatchStorageRequestsParams) error {
	_, err := q.exec(ctx, q.rebatchStorageRequestsStmt, rebatchStorageRequests, arg.BatchID, arg.ErrorCause)
	return err
}

const updateStorageRequestsStatus = `-- name: UpdateStorageRequestsStatus :exec
UPDATE storage_requests
SET status = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE batch_id = $1
`

type UpdateStorageRequestsStatusParams struct {
	BatchID sql.NullString              `json:"batchID"`
	Status  broker.StorageRequestStatus `json:"status"`
}

func (q *Queries) UpdateStorageRequestsStatus(ctx context.Context, arg UpdateStorageRequestsStatusParams) error {
	_, err := q.exec(ctx, q.updateStorageRequestsStatusStmt, updateStorageRequestsStatus, arg.BatchID, arg.Status)
	return err
}
