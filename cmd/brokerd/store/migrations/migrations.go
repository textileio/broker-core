// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\xc8\xcc\x8b\xcf\xca\x4f\x2a\xb6\xe6\x42\x12\x4e\x49\x4d\xcc\x41\x15\x29\x2e\xc9\x2f\x4a\x4c\x4f\x8d\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x41\x95\x4c\x4a\x2c\x49\xce\x48\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\xbc\x58\x40\x6e\x5a\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 90, mode: os.FileMode(420), modTime: time.Unix(1627993740, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x4f\x6f\xda\x4e\x10\xbd\xf3\x29\xe6\x96\x20\xe5\xf0\xbb\xe7\xe4\x1f\x59\x2a\xab\xc4\x44\x66\x91\xc8\x69\x35\x78\x07\xb2\xcd\xd6\xeb\xee\x9f\x14\xfa\xe9\x2b\xdb\x98\x00\xb6\xe3\x96\x4b\x2b\xf5\xea\x37\x33\x9e\x3f\xef\xbd\x9d\xa4\x2c\xe2\x0c\x78\xf4\xff\x8c\x41\x3c\x85\x64\xce\x81\xad\xe2\x05\x5f\xc0\x1a\x7d\xf6\x42\x0e\x6e\x47\x00\x00\x4a\x82\xa7\x9d\x87\xa7\x34\x7e\x8c\xd2\x67\xf8\xcc\x9e\xef\x2a\xc0\x79\xf4\xc1\xd5\x60\x99\x9d\x2c\x67\xb3\x1a\xb1\x54\x88\x0d\x66\xde\x58\x50\xf9\x25\x28\x09\xb5\x90\xc1\xa2\x57\x26\xef\xc0\x0b\xdc\x6b\x83\x52\x64\xcd\x8f\x2f\x60\x45\x19\x7d\x0c\x3a\xf5\x83\x60\xad\xb6\xed\xda\x19\x5a\x11\xac\x3e\x4f\x85\x07\x36\x8d\x96\x33\x0e\x37\x37\xef\x51\xaa\xd8\xb8\xf6\x5f\xfa\x43\x51\x4a\xeb\x06\x82\xa5\x72\xa8\xb5\xf9\x2e\x2c\x55\x2b\x56\xf9\x16\xd6\xc6\x68\xc2\xbc\x9d\x34\x8d\x66\x0b\x56\xe7\x6d\x94\x16\x54\x98\xec\x45\x48\x42\xa9\x55\xde\x33\x1d\x59\x6b\xec\x40\x0f\xc6\x96\x99\x5d\xbb\xcb\x2c\xa1\x27\x29\xd0\x03\x8f\x1f\xd9\x82\x47\x8f\x4f\xed\x3a\x93\x65\x9a\xb2\x84\x8b\x63\x48\x9d\x1c\x0a\x79\x4d\x72\x95\x3b\xbe\x1f\x8d\x86\xd8\x28\x3c\x6e\x1b\x42\xd6\x1f\x94\x04\xce\x56\xfc\x62\x88\x57\xda\x77\x7d\x7e\x43\x1d\xa8\x0b\xb8\x7a\xe8\x2a\xfb\x44\x12\xb7\x4d\x57\x77\x65\x0f\xe3\xba\xfa\x64\x9e\x2c\x78\x1a\xc5\x09\x87\xcd\xab\x78\x1f\x44\x1c\x47\x98\xce\x53\x16\x7f\x4a\xce\x2a\x8c\x21\x65\x53\x96\xb2\x64\xc2\x8e\x5a\xbc\x55\x72\x3c\x1a\xdf\x8f\x00\x3e\xdc\x95\xf3\xc6\xe2\x96\x84\xa5\x6f\x81\x9c\x1f\x94\xb0\x44\x8f\x7d\x5a\x3a\xf6\x58\x62\x67\x8a\x77\x5f\x51\xeb\x36\xfd\x0e\xd4\xaa\xb6\x9c\x1b\x0f\x79\xd0\xba\xf1\x83\xba\x58\x66\x42\xee\xcf\x24\x7f\x5c\xf1\x7f\x27\x14\x16\x19\x06\x47\x43\xca\xfb\x03\x74\xed\xbf\xea\xef\x9e\xf2\x17\x78\x5f\xfa\x64\x8b\xf2\x1d\x77\xc2\x90\x95\x4e\xda\x83\xae\x95\xec\x41\x1a\xae\x14\xd6\xbc\x29\x49\xb6\x27\xac\xb2\x6b\x25\xbb\x1d\xa7\x02\x69\x57\xa8\x83\x9b\xf7\xdb\xd2\xbf\x73\xd3\xc3\x49\xe3\xe4\x81\xad\xba\x4e\x2a\xba\x16\x3f\x4f\x9a\x7b\x77\xa0\x03\x44\x09\x79\xa1\x72\xf1\xc5\xac\x07\xe5\x4e\x3b\xca\x82\x3f\x7d\x76\x3a\x5e\x9b\x1e\x3b\xf0\xfb\x82\xfa\x94\x6f\x09\xe5\xfe\xba\xc5\xff\xad\xaf\x8e\x29\xa8\xe6\xf4\xc9\x52\x2b\x67\x6b\x2d\xf5\xca\x09\x9a\x26\x7e\x06\x00\x00\xff\xff\x7b\x29\x72\xe9\x88\x09\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 2440, mode: os.FileMode(420), modTime: time.Unix(1627993768, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
