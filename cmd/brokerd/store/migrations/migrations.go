// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\xc8\xcc\x8b\xcf\xca\x4f\x2a\xb6\xe6\x42\x12\x4e\x49\x4d\xcc\x41\x15\x29\x2e\xc9\x2f\x4a\x4c\x4f\x8d\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x41\x95\x4c\x4a\x2c\x49\xce\x48\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\xbc\x58\x40\x6e\x5a\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 90, mode: os.FileMode(420), modTime: time.Unix(1627396546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x4d\x73\xda\x40\x0c\xbd\xf3\x2b\x74\x0b\xcc\xe4\xd0\x7b\x4e\x2e\x59\x3a\x9e\x82\xc9\x98\x65\x86\x9c\x76\x84\x57\x90\x6d\xb6\x5e\x77\x3f\x52\xe8\xaf\xef\x60\x63\x02\xb1\x1d\xa7\x5c\x72\xe8\xd5\x4f\x92\x57\xd2\x7b\x4f\xe3\x94\x45\x9c\x01\x8f\xbe\x4e\x19\xc4\x13\x48\xe6\x1c\xd8\x2a\x5e\xf0\x05\xac\xd1\x67\x4f\xe4\x60\x38\x00\x00\x50\x12\x3c\xed\x3c\x3c\xa4\xf1\x2c\x4a\x1f\xe1\x3b\x7b\xbc\x2d\x01\xe7\xd1\x07\x07\xee\x27\x6a\xad\x72\x5f\x56\x48\x96\xd3\x69\x85\x5a\x2a\xc4\x06\x33\x6f\x2c\x34\x41\x49\xa8\x85\x0c\x16\xbd\x32\x79\x0b\x5e\xe0\x5e\x1b\x94\x22\xab\x7f\xfe\x06\x56\x94\xd1\xfb\xa0\x53\x7f\x08\xd6\x6a\xdb\xac\x9d\xa1\x15\xc1\xea\xcb\x54\xb8\x67\x93\x68\x39\xe5\x70\x73\xf3\x1a\xa5\x8a\x8d\x6b\xfe\xa5\x3b\x14\xa5\xb4\xae\x27\x58\x2a\x87\x5a\x9b\xdf\xc2\x52\x39\x66\x95\x6f\x61\x6d\x8c\x26\xcc\x9b\x49\x93\x68\xba\x60\x55\xde\x46\x69\x41\x85\xc9\x9e\x84\x24\x94\x5a\xe5\x1d\xdd\x91\xb5\xc6\xf6\xbc\xc1\xd8\x43\x66\xdb\xec\x32\x4b\xe8\x49\x0a\xf4\xc0\xe3\x19\x5b\xf0\x68\xf6\xd0\xac\x33\x5e\xa6\x29\x4b\xb8\x38\x85\x54\xc9\xa1\x90\xd7\x24\x97\xb9\xa3\xbb\xc1\xa0\x8f\x91\xc2\xe3\xb6\x26\x65\xf5\x41\x49\xe0\x6c\xc5\xdf\x34\xf1\x4c\xfb\xb6\xcf\x2f\xa8\x03\xb5\x01\x57\x37\x5d\x66\x9f\xc9\x62\x58\xbf\xea\xf6\xf0\x86\x51\x55\x7d\x3c\x4f\x16\x3c\x8d\xe2\x84\xc3\xe6\x59\xbc\x36\x22\x4e\x2d\x4c\xe6\x29\x8b\xbf\x25\x17\x15\x46\x90\xb2\x09\x4b\x59\x32\x66\x27\x3d\x0e\x95\x1c\x0d\x46\x77\x03\x80\x77\x67\xe5\xbc\xb1\xb8\x25\x61\xe9\x57\x20\xe7\x7b\x65\x2c\xd1\x63\x97\x96\x4e\x6f\x3c\x60\x1f\x51\xfd\x91\x5a\xe5\x94\x73\xe3\x21\x0f\x5a\xd7\x7e\x50\x15\xcb\x4c\xc8\xfd\x85\xe4\x4f\x23\xfe\x72\x46\x61\x91\x61\x70\xd4\xa7\xbc\x4f\xa0\x6b\xf7\x56\xff\x75\x95\x1f\xe0\xfd\xc1\x27\x1b\x94\x6f\xd9\x13\x86\xec\xe0\xa4\x1d\xe8\x5a\xc9\x0e\xa4\xe6\x4a\x61\xcd\x8b\x92\x64\x3b\xc2\x4a\xbb\x56\xb2\xdd\x71\x4a\x90\x76\x85\x3a\xba\x79\xb7\x2d\xfd\x3f\x3b\x3d\xae\x34\x4e\xee\xd9\xaa\x6d\xa5\xa2\x6d\xf0\xf3\xa4\xde\x77\x0b\xda\x43\x94\x90\x17\x2a\x17\x3f\xcc\xba\x57\xee\xb4\xa3\x2c\xf8\xf3\xb3\xd3\x72\x6d\x3a\xec\xc0\xef\x0b\xea\xbe\xf7\x28\xf7\xd7\x0d\xfe\x33\xaf\xce\xdf\x00\x00\x00\xff\xff\x73\x0b\xbd\x71\x07\x09\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 2311, mode: os.FileMode(420), modTime: time.Unix(1627484070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
