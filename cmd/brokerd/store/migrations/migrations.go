// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\xc8\xcc\x8b\xcf\xca\x4f\x2a\xb6\xe6\x42\x12\x4e\x49\x4d\xcc\x41\x15\x29\x2e\xc9\x2f\x4a\x4c\x4f\x8d\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x41\x95\x4c\x4a\x2c\x49\xce\x48\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\xbc\x58\x40\x6e\x5a\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 90, mode: os.FileMode(420), modTime: time.Unix(1627396546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x4d\x6f\xda\x40\x10\xbd\xf3\x2b\xe6\x16\x90\x72\xe8\x3d\x27\x97\x2c\x95\x55\x30\x91\x59\x24\x72\x5a\x0d\xde\x81\x6c\xb3\xf5\xba\xfb\x91\x42\x7f\x7d\x85\x8d\x09\xc4\x76\x9c\x72\x69\xa5\x5e\xfd\x66\xc6\x33\x6f\xde\xbc\x1d\xa7\x2c\xe2\x0c\x78\xf4\x79\xca\x20\x9e\x40\x32\xe7\xc0\x56\xf1\x82\x2f\x60\x8d\x3e\x7b\x22\x07\xc3\x01\x00\x80\x92\xe0\x69\xe7\xe1\x21\x8d\x67\x51\xfa\x08\x5f\xd9\xe3\x6d\x09\x38\x8f\x3e\x38\x70\xdf\x51\x6b\x95\xfb\xb2\x42\xb2\x9c\x4e\x2b\xd4\x52\x21\x36\x98\x79\x63\xa1\x09\x4a\x42\x2d\x64\xb0\xe8\x95\xc9\x5b\xf0\x02\xf7\xda\xa0\x14\x59\xfd\xf3\x37\xb0\xa2\x8c\xde\x07\x9d\xfa\x45\xb0\x56\xdb\x66\xed\x0c\xad\x08\x56\x5f\xa6\xc2\x3d\x9b\x44\xcb\x29\x87\x9b\x9b\xd7\x28\x55\x6c\x5c\xf3\x2f\xdd\xa1\x28\xa5\x75\x3d\xc1\x52\x39\xd4\xda\xfc\x14\x96\x4a\x9a\x55\xbe\x85\xb5\x31\x9a\x30\x6f\x26\x4d\xa2\xe9\x82\x55\x79\x1b\xa5\x05\x15\x26\x7b\x12\x92\x50\x6a\x95\x77\x4c\x47\xd6\x1a\xdb\xd3\x83\xb1\x87\xcc\x36\xee\x32\x4b\xe8\x49\x0a\xf4\xc0\xe3\x19\x5b\xf0\x68\xf6\xd0\xac\x33\x5e\xa6\x29\x4b\xb8\x38\x85\x54\xc9\xa1\x90\xd7\x24\x97\xb9\xa3\xbb\xc1\xa0\x4f\x91\xc2\xe3\xb6\x16\x65\xf5\x41\x49\xe0\x6c\xc5\xdf\x0c\xf1\x4c\xfb\xb6\xcf\x2f\xa8\x03\xb5\x01\x57\x0f\x5d\x66\x9f\x9d\xc5\xb0\xee\xea\xf6\xd0\xc3\xa8\xaa\x3e\x9e\x27\x0b\x9e\x46\x71\xc2\x61\xf3\x2c\x5e\x07\x11\xa7\x11\x26\xf3\x94\xc5\x5f\x92\x8b\x0a\x23\x48\xd9\x84\xa5\x2c\x19\xb3\xd3\x3d\x0e\x95\x1c\x0d\x46\x77\x03\x80\x77\xb9\x72\xde\x58\xdc\x92\xb0\xf4\x23\x90\xf3\xbd\x67\x2c\xd1\x63\xd7\x2d\x9d\x7a\x3c\x60\x1f\xb9\xfa\xa3\xb4\x4a\x96\x73\xe3\x21\x0f\x5a\xd7\x7e\x50\x15\xcb\x4c\xc8\xfd\xc5\xc9\x9f\x28\xfe\x74\x26\x61\x91\x61\x70\xd4\x77\x79\x7f\x41\xae\xdd\x5b\xfd\xd3\x55\x7e\x40\xf7\x07\x9f\x6c\x48\xbe\x65\x4f\x18\xb2\x83\x93\x76\xa0\x6b\x25\x3b\x90\x5a\x2b\x85\x35\x2f\x4a\x92\xed\x08\x2b\xed\x5a\xc9\x76\xc7\x29\x41\xda\x15\xea\xe8\xe6\xdd\xb6\xf4\xff\xec\xf4\xb8\xd2\x38\xb9\x67\xab\xb6\x95\x8a\x36\xe2\xe7\x49\xbd\xef\x16\xb4\x47\x28\x21\x2f\x54\x2e\xbe\x99\x75\xef\xb9\xd3\x8e\xb2\xe0\xcf\x9f\x9d\x96\xd7\xa6\xc3\x0e\xfc\xbe\xa0\xee\xf7\x1e\xe5\xfe\x3a\xe2\xff\xd5\x57\xc7\x14\x54\x69\xfa\x8c\xd4\xd2\xd9\x1a\xa4\x5e\x39\x41\xdd\xc4\xef\x00\x00\x00\xff\xff\x86\xbe\x9e\x98\x8c\x09\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 2444, mode: os.FileMode(420), modTime: time.Unix(1627484184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
