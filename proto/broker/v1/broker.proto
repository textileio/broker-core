syntax = "proto3";
package broker.v1;
option go_package = "github.com/textileio/broker-core/gen/broker/v1;broker";

import "google/protobuf/timestamp.proto";

message CreateStorageRequestRequest {
  string cid = 1;
  string origin = 2;
}

message CreateStorageRequestResponse {
  StorageRequest request = 1;
}

message CreatePreparedStorageRequestRequest {
  string cid = 1;
  PreparedCAR prepared_car = 2;
  Metadata metadata = 3;

  message Metadata {
    string origin = 1;
    map<string, string> tags = 2;
  }

  message PreparedCAR {
    string piece_cid = 1;
    uint64 piece_size = 2;
    int64 rep_factor = 3;
    google.protobuf.Timestamp deadline = 4;
    CARURL car_url = 5;
    CARIPFS car_ipfs = 6;

    message CARURL {
      string url = 1;
    }

    message CARIPFS {
      string cid = 1;
      repeated string multiaddrs = 2;
    }
  }
}

message CreatePreparedStorageRequestResponse {
  StorageRequest request = 1;
}

message GetStorageRequestInfoRequest {
  string id = 1;
}

message GetStorageRequestInfoResponse {
  StorageRequest storage_request = 1;
  repeated StorageRequestDeal deals = 2;

  message StorageRequestDeal {
	  string storage_provider_id = 1;
	  int64 deal_id = 2;
	  uint64 expiration = 3;
  }
}

message Sources {
  CARURL car_url = 1;
  CARIPFS car_ipfs = 2;

  message CARURL {
    string url = 1;
  }

  message CARIPFS {
    string cid = 1;
    repeated string multiaddrs = 2;
  }
}

message ReadyToAuction {
    string id = 1;
    string batch_id = 2;
    bytes payload_cid = 3;
    uint64 deal_size = 4;
    uint64 deal_duration = 5;
    uint32 deal_replication = 6;
    bool deal_verified = 7;
    repeated string excluded_storage_providers = 8;
    uint64 fil_epoch_deadline = 9;
    Sources sources = 10;
}
message ReadyToCreateDeals {
  string batch_id = 1;
  bytes payload_cid = 2;
  bytes piece_cid = 3;
  uint64 piece_size = 4;
  uint64 duration = 5;
  repeated Proposal proposals = 6;

  message Proposal {
    string storage_provider_id = 1;
    int64 price_per_gib_per_epoch = 2;
    uint64 start_epoch = 3;
    bool verified = 4;
    bool fast_retrieval = 5;
    string auction_id = 6;
    string bid_id = 7;
  }
}

message ReadyToBatch {
  string operation_id = 1;
  repeated ReadyToBatchBR data_cids = 2;

  message ReadyToBatchBR {
    string storage_request_id = 1;
    bytes data_cid = 2;
    string origin = 3;
  }
}

message NewBatchCreated {
  string id = 1;
  bytes batch_cid = 2;
  repeated string storage_request_ids = 3;
  string origin = 4;
}


message DealProposalAccepted {
  string batch_id = 1;
  string storage_provider_id = 2;
  bytes proposal_cid = 3;
  string auction_id = 4;
  string bid_id = 5;
}

message AuctionClosed {
    string id = 1;
    string batch_id = 2;
    uint64 deal_duration = 3;
    uint32 deal_replication = 4;
    bool deal_verified = 5;
    Status status = 6;
    map<string, WinningBid> winning_bids = 7;
    string error = 8;
                               
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_QUEUED = 1;
        STATUS_STARTED = 2;
        STATUS_FINALIZED = 3;
    }

    message WinningBid {
        string storage_provider_id = 1;
        int64 price = 2;
        uint64 start_epoch = 3;
        bool fast_retrieval = 4;
    }
}

message NewBatchPrepared {
  string id = 1;
  bytes piece_cid = 2;
  uint64 piece_size = 3;
}

message FinalizedDeal {
    string batch_id = 1;
    int64 deal_id = 2;
    uint64 deal_expiration = 3;
    string storage_provider_id = 4;
    string error_cause = 5;
    string auction_id = 6;
    string bid_id = 7;
}

message StorageRequest {
  string id = 1;
  bytes data_cid = 2;
  Status status = 3;
  string batch_id = 4;
  string origin = 5;
  google.protobuf.Timestamp created_at = 6; 
  google.protobuf.Timestamp updated_at = 7; 

  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_BATCHING = 1;
    STATUS_PREPARING = 2;
    STATUS_AUCTIONING = 3;
    STATUS_DEALMAKING = 4;
    STATUS_SUCCESS = 5;
    STATUS_ERROR = 6;
  }
}

service APIService {
  rpc CreateStorageRequest(CreateStorageRequestRequest) returns (CreateStorageRequestResponse) {}
  rpc CreatePreparedStorageRequest(CreatePreparedStorageRequestRequest) returns (CreatePreparedStorageRequestResponse) {}
  rpc GetStorageRequestInfo(GetStorageRequestInfoRequest) returns (GetStorageRequestInfoResponse) {}
}
