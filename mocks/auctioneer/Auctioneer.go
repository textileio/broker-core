// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	auction "github.com/textileio/bidbot/lib/auction"
	"github.com/textileio/broker-core/broker"

	cid "github.com/ipfs/go-cid"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Auctioneer is an autogenerated mock type for the Auctioneer type
type Auctioneer struct {
	mock.Mock
}

// ProposalAccepted provides a mock function with given fields: ctx, auID, bidID, proposalCid
func (_m *Auctioneer) ProposalAccepted(ctx context.Context, auID auction.AuctionID, bidID auction.BidID, proposalCid cid.Cid) error {
	ret := _m.Called(ctx, auID, bidID, proposalCid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, auction.AuctionID, auction.BidID, cid.Cid) error); ok {
		r0 = rf(ctx, auID, bidID, proposalCid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadyToAuction provides a mock function with given fields: ctx, id, payloadCid, dealSize, dealDuration, dealReplication, dealVerified, excludedMiners, filEpochDeadline, sources
func (_m *Auctioneer) ReadyToAuction(ctx context.Context, id broker.StorageDealID, payloadCid cid.Cid, dealSize int, dealDuration int, dealReplication int, dealVerified bool, excludedMiners []string, filEpochDeadline uint64, sources auction.Sources) (auction.AuctionID, error) {
	ret := _m.Called(ctx, id, payloadCid, dealSize, dealDuration, dealReplication, dealVerified, excludedMiners, filEpochDeadline, sources)

	var r0 auction.AuctionID
	if rf, ok := ret.Get(0).(func(context.Context, broker.StorageDealID, cid.Cid, int, int, int, bool, []string, uint64, auction.Sources) auction.AuctionID); ok {
		r0 = rf(ctx, id, payloadCid, dealSize, dealDuration, dealReplication, dealVerified, excludedMiners, filEpochDeadline, sources)
	} else {
		r0 = ret.Get(0).(auction.AuctionID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, broker.StorageDealID, cid.Cid, int, int, int, bool, []string, uint64, auction.Sources) error); ok {
		r1 = rf(ctx, id, payloadCid, dealSize, dealDuration, dealReplication, dealVerified, excludedMiners, filEpochDeadline, sources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
