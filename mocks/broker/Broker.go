// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	auction "github.com/textileio/bidbot/lib/auction"
	broker "github.com/textileio/broker-core/broker"

	cid "github.com/ipfs/go-cid"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, dataCid
func (_m *Broker) Create(ctx context.Context, dataCid cid.Cid) (broker.BrokerRequest, error) {
	ret := _m.Called(ctx, dataCid)

	var r0 broker.BrokerRequest
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) broker.BrokerRequest); ok {
		r0 = rf(ctx, dataCid)
	} else {
		r0 = ret.Get(0).(broker.BrokerRequest)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid) error); ok {
		r1 = rf(ctx, dataCid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrepared provides a mock function with given fields: ctx, payloadCid, pc
func (_m *Broker) CreatePrepared(ctx context.Context, payloadCid cid.Cid, pc broker.PreparedCAR) (broker.BrokerRequest, error) {
	ret := _m.Called(ctx, payloadCid, pc)

	var r0 broker.BrokerRequest
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid, broker.PreparedCAR) broker.BrokerRequest); ok {
		r0 = rf(ctx, payloadCid, pc)
	} else {
		r0 = ret.Get(0).(broker.BrokerRequest)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid, broker.PreparedCAR) error); ok {
		r1 = rf(ctx, payloadCid, pc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStorageDeal provides a mock function with given fields: ctx, batchCid, srids
func (_m *Broker) CreateStorageDeal(ctx context.Context, batchCid cid.Cid, srids []broker.BrokerRequestID) (auction.StorageDealID, error) {
	ret := _m.Called(ctx, batchCid, srids)

	var r0 auction.StorageDealID
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid, []broker.BrokerRequestID) auction.StorageDealID); ok {
		r0 = rf(ctx, batchCid, srids)
	} else {
		r0 = ret.Get(0).(auction.StorageDealID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid, []broker.BrokerRequestID) error); ok {
		r1 = rf(ctx, batchCid, srids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBrokerRequestInfo provides a mock function with given fields: ctx, ID
func (_m *Broker) GetBrokerRequestInfo(ctx context.Context, ID broker.BrokerRequestID) (broker.BrokerRequestInfo, error) {
	ret := _m.Called(ctx, ID)

	var r0 broker.BrokerRequestInfo
	if rf, ok := ret.Get(0).(func(context.Context, broker.BrokerRequestID) broker.BrokerRequestInfo); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(broker.BrokerRequestInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, broker.BrokerRequestID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageDealAuctioned provides a mock function with given fields: ctx, _a1
func (_m *Broker) StorageDealAuctioned(ctx context.Context, _a1 broker.ClosedAuction) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, broker.ClosedAuction) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageDealFinalizedDeal provides a mock function with given fields: ctx, fad
func (_m *Broker) StorageDealFinalizedDeal(ctx context.Context, fad broker.FinalizedAuctionDeal) error {
	ret := _m.Called(ctx, fad)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, broker.FinalizedAuctionDeal) error); ok {
		r0 = rf(ctx, fad)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageDealPrepared provides a mock function with given fields: ctx, id, pr
func (_m *Broker) StorageDealPrepared(ctx context.Context, id auction.StorageDealID, pr broker.DataPreparationResult) error {
	ret := _m.Called(ctx, id, pr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, auction.StorageDealID, broker.DataPreparationResult) error); ok {
		r0 = rf(ctx, id, pr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageDealProposalAccepted provides a mock function with given fields: ctx, sdID, miner, proposalCid
func (_m *Broker) StorageDealProposalAccepted(ctx context.Context, sdID auction.StorageDealID, miner string, proposalCid cid.Cid) error {
	ret := _m.Called(ctx, sdID, miner, proposalCid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, auction.StorageDealID, string, cid.Cid) error); ok {
		r0 = rf(ctx, sdID, miner, proposalCid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
