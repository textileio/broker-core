// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	chainapi "github.com/textileio/broker-core/gen/broker/chainapi/v1"

	mock "github.com/stretchr/testify/mock"
)

// ChainApiServiceServer is an autogenerated mock type for the ChainApiServiceServer type
type ChainApiServiceServer struct {
	mock.Mock
}

// HasFunds provides a mock function with given fields: _a0, _a1
func (_m *ChainApiServiceServer) HasFunds(_a0 context.Context, _a1 *chainapi.HasFundsRequest) (*chainapi.HasFundsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chainapi.HasFundsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chainapi.HasFundsRequest) *chainapi.HasFundsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chainapi.HasFundsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chainapi.HasFundsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockInfo provides a mock function with given fields: _a0, _a1
func (_m *ChainApiServiceServer) LockInfo(_a0 context.Context, _a1 *chainapi.LockInfoRequest) (*chainapi.LockInfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chainapi.LockInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chainapi.LockInfoRequest) *chainapi.LockInfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chainapi.LockInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chainapi.LockInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// State provides a mock function with given fields: _a0, _a1
func (_m *ChainApiServiceServer) State(_a0 context.Context, _a1 *chainapi.StateRequest) (*chainapi.StateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chainapi.StateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chainapi.StateRequest) *chainapi.StateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chainapi.StateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chainapi.StateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedChainApiServiceServer provides a mock function with given fields:
func (_m *ChainApiServiceServer) mustEmbedUnimplementedChainApiServiceServer() {
	_m.Called()
}
