// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package broker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	CreateBrokerRequest(ctx context.Context, in *CreateBrokerRequestRequest, opts ...grpc.CallOption) (*CreateBrokerRequestResponse, error)
	CreatePreparedBrokerRequest(ctx context.Context, in *CreatePreparedBrokerRequestRequest, opts ...grpc.CallOption) (*CreatePreparedBrokerRequestResponse, error)
	GetBrokerRequestInfo(ctx context.Context, in *GetBrokerRequestInfoRequest, opts ...grpc.CallOption) (*GetBrokerRequestInfoResponse, error)
	CreateStorageDeal(ctx context.Context, in *CreateStorageDealRequest, opts ...grpc.CallOption) (*CreateStorageDealResponse, error)
	StorageDealAuctioned(ctx context.Context, in *StorageDealAuctionedRequest, opts ...grpc.CallOption) (*StorageDealAuctionedResponse, error)
	StorageDealFinalizedDeal(ctx context.Context, in *StorageDealFinalizedDealRequest, opts ...grpc.CallOption) (*StorageDealFinalizedDealResponse, error)
	StorageDealProposalAccepted(ctx context.Context, in *StorageDealProposalAcceptedRequest, opts ...grpc.CallOption) (*StorageDealProposalAcceptedResponse, error)
	StorageDealPrepared(ctx context.Context, in *StorageDealPreparedRequest, opts ...grpc.CallOption) (*StorageDealPreparedResponse, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) CreateBrokerRequest(ctx context.Context, in *CreateBrokerRequestRequest, opts ...grpc.CallOption) (*CreateBrokerRequestResponse, error) {
	out := new(CreateBrokerRequestResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/CreateBrokerRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreatePreparedBrokerRequest(ctx context.Context, in *CreatePreparedBrokerRequestRequest, opts ...grpc.CallOption) (*CreatePreparedBrokerRequestResponse, error) {
	out := new(CreatePreparedBrokerRequestResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/CreatePreparedBrokerRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetBrokerRequestInfo(ctx context.Context, in *GetBrokerRequestInfoRequest, opts ...grpc.CallOption) (*GetBrokerRequestInfoResponse, error) {
	out := new(GetBrokerRequestInfoResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/GetBrokerRequestInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreateStorageDeal(ctx context.Context, in *CreateStorageDealRequest, opts ...grpc.CallOption) (*CreateStorageDealResponse, error) {
	out := new(CreateStorageDealResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/CreateStorageDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) StorageDealAuctioned(ctx context.Context, in *StorageDealAuctionedRequest, opts ...grpc.CallOption) (*StorageDealAuctionedResponse, error) {
	out := new(StorageDealAuctionedResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/StorageDealAuctioned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) StorageDealFinalizedDeal(ctx context.Context, in *StorageDealFinalizedDealRequest, opts ...grpc.CallOption) (*StorageDealFinalizedDealResponse, error) {
	out := new(StorageDealFinalizedDealResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/StorageDealFinalizedDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) StorageDealProposalAccepted(ctx context.Context, in *StorageDealProposalAcceptedRequest, opts ...grpc.CallOption) (*StorageDealProposalAcceptedResponse, error) {
	out := new(StorageDealProposalAcceptedResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/StorageDealProposalAccepted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) StorageDealPrepared(ctx context.Context, in *StorageDealPreparedRequest, opts ...grpc.CallOption) (*StorageDealPreparedResponse, error) {
	out := new(StorageDealPreparedResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/StorageDealPrepared", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations must embed UnimplementedAPIServiceServer
// for forward compatibility
type APIServiceServer interface {
	CreateBrokerRequest(context.Context, *CreateBrokerRequestRequest) (*CreateBrokerRequestResponse, error)
	CreatePreparedBrokerRequest(context.Context, *CreatePreparedBrokerRequestRequest) (*CreatePreparedBrokerRequestResponse, error)
	GetBrokerRequestInfo(context.Context, *GetBrokerRequestInfoRequest) (*GetBrokerRequestInfoResponse, error)
	CreateStorageDeal(context.Context, *CreateStorageDealRequest) (*CreateStorageDealResponse, error)
	StorageDealAuctioned(context.Context, *StorageDealAuctionedRequest) (*StorageDealAuctionedResponse, error)
	StorageDealFinalizedDeal(context.Context, *StorageDealFinalizedDealRequest) (*StorageDealFinalizedDealResponse, error)
	StorageDealProposalAccepted(context.Context, *StorageDealProposalAcceptedRequest) (*StorageDealProposalAcceptedResponse, error)
	StorageDealPrepared(context.Context, *StorageDealPreparedRequest) (*StorageDealPreparedResponse, error)
	mustEmbedUnimplementedAPIServiceServer()
}

// UnimplementedAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (UnimplementedAPIServiceServer) CreateBrokerRequest(context.Context, *CreateBrokerRequestRequest) (*CreateBrokerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrokerRequest not implemented")
}
func (UnimplementedAPIServiceServer) CreatePreparedBrokerRequest(context.Context, *CreatePreparedBrokerRequestRequest) (*CreatePreparedBrokerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePreparedBrokerRequest not implemented")
}
func (UnimplementedAPIServiceServer) GetBrokerRequestInfo(context.Context, *GetBrokerRequestInfoRequest) (*GetBrokerRequestInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerRequestInfo not implemented")
}
func (UnimplementedAPIServiceServer) CreateStorageDeal(context.Context, *CreateStorageDealRequest) (*CreateStorageDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorageDeal not implemented")
}
func (UnimplementedAPIServiceServer) StorageDealAuctioned(context.Context, *StorageDealAuctionedRequest) (*StorageDealAuctionedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageDealAuctioned not implemented")
}
func (UnimplementedAPIServiceServer) StorageDealFinalizedDeal(context.Context, *StorageDealFinalizedDealRequest) (*StorageDealFinalizedDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageDealFinalizedDeal not implemented")
}
func (UnimplementedAPIServiceServer) StorageDealProposalAccepted(context.Context, *StorageDealProposalAcceptedRequest) (*StorageDealProposalAcceptedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageDealProposalAccepted not implemented")
}
func (UnimplementedAPIServiceServer) StorageDealPrepared(context.Context, *StorageDealPreparedRequest) (*StorageDealPreparedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageDealPrepared not implemented")
}
func (UnimplementedAPIServiceServer) mustEmbedUnimplementedAPIServiceServer() {}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_CreateBrokerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrokerRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateBrokerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/CreateBrokerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateBrokerRequest(ctx, req.(*CreateBrokerRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreatePreparedBrokerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePreparedBrokerRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreatePreparedBrokerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/CreatePreparedBrokerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreatePreparedBrokerRequest(ctx, req.(*CreatePreparedBrokerRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetBrokerRequestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerRequestInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetBrokerRequestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/GetBrokerRequestInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetBrokerRequestInfo(ctx, req.(*GetBrokerRequestInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreateStorageDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStorageDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateStorageDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/CreateStorageDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateStorageDeal(ctx, req.(*CreateStorageDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_StorageDealAuctioned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageDealAuctionedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).StorageDealAuctioned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/StorageDealAuctioned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).StorageDealAuctioned(ctx, req.(*StorageDealAuctionedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_StorageDealFinalizedDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageDealFinalizedDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).StorageDealFinalizedDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/StorageDealFinalizedDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).StorageDealFinalizedDeal(ctx, req.(*StorageDealFinalizedDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_StorageDealProposalAccepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageDealProposalAcceptedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).StorageDealProposalAccepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/StorageDealProposalAccepted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).StorageDealProposalAccepted(ctx, req.(*StorageDealProposalAcceptedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_StorageDealPrepared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageDealPreparedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).StorageDealPrepared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/StorageDealPrepared",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).StorageDealPrepared(ctx, req.(*StorageDealPreparedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.v1.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBrokerRequest",
			Handler:    _APIService_CreateBrokerRequest_Handler,
		},
		{
			MethodName: "CreatePreparedBrokerRequest",
			Handler:    _APIService_CreatePreparedBrokerRequest_Handler,
		},
		{
			MethodName: "GetBrokerRequestInfo",
			Handler:    _APIService_GetBrokerRequestInfo_Handler,
		},
		{
			MethodName: "CreateStorageDeal",
			Handler:    _APIService_CreateStorageDeal_Handler,
		},
		{
			MethodName: "StorageDealAuctioned",
			Handler:    _APIService_StorageDealAuctioned_Handler,
		},
		{
			MethodName: "StorageDealFinalizedDeal",
			Handler:    _APIService_StorageDealFinalizedDeal_Handler,
		},
		{
			MethodName: "StorageDealProposalAccepted",
			Handler:    _APIService_StorageDealProposalAccepted_Handler,
		},
		{
			MethodName: "StorageDealPrepared",
			Handler:    _APIService_StorageDealPrepared_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker/v1/broker.proto",
}
